import java.util.Scanner;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.lang.Thread;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
public  class Employee extends Validation{  // employee class inherits validation class
	Scanner scanner =new Scanner(System.in);
	public void employeeDetails() {
	System.out.println("\n**********Welcome to Employee Management System**********");
	while(true) {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException error) {
			System.out.println(error);
		}
		 System.out.println("\nList of operations:");
		 System.out.println("1.Add new employee details:");
		 System.out.println("2.Update employee details :");
		 System.out.println("3.Delete employee details :");
		 System.out.println("4.Display employee details:");
		 System.out.println("5.Exit  :");
		 System.out.println("\nEnter your choice of operation:");
		 int choice=scanner.nextInt();
		 switch(choice) {
		 case 1:
			 System.out.println("No of employees want to add:");
			 int numberOfEmployee=scanner.nextInt();
			 while(numberOfEmployee<=10) {
			 employeeDetailsMethod(numberOfEmployee);
			 break;
			 }
			 if(numberOfEmployee>10) {
				 System.out.println("Employees count should be less than 10");
			 }
			 break;
		 case 2:
			 try{  
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");    
				Statement prepareStatememt=connection.createStatement();  
				ResultSet resultSet=prepareStatememt.executeQuery("select * from employeedetails");  
				if(resultSet.next()==false) {
					System.out.println("Empty database");
				}
				else {
					System.out.println("Enter the EmployeeId which is to be update:");
					String idUpdate=scanner.next();
					updateEmployeeDetails(idUpdate);
				}
				connection.close();  
				}catch(Exception error){ 
					System.out.println(error);}  
			 break;
		case 3:
			 System.out.println("Enter the EmployeeId to remove:");
			 String idRemove=scanner.next();
			 deleteDetails(idRemove);
			 break;
		case 4:
			 detailsDisplay();
			 break;
		case 5:
			 break;
		 }
			 if(choice==5) {
				 break;
			 }
	}
	}
 public String validCheck(String details,String conditions,String invalid) {
	 Connection connection = null;
	try {
		connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");
	} 
	catch (SQLException error) {
		System.out.println(error);
	}
    	 while(true) {
	         int test=0;
	         System.out.println("Enter the employee "+details);
	         String data =scanner.next();
	         if(conditions=="^ACE+[0-9]{4}" || conditions=="^(?=.{2,30}$)(([a-zA-Z0-9])\\2?(?!\\2))+(?:\\."+"[a-zA-Z0-9]+)*@"+"(?:[a-zA-Z]+\\.)+[.com]{2,7}$"){
		       try {
		    	   PreparedStatement prepareStatement=connection.prepareStatement("SELECT count(*)FROM employeedetails WHERE EmployeeId=(?) or EmployeeMailId=(?)");
		           prepareStatement.setString(1, data);
		           prepareStatement.setString(2, data);
		           ResultSet record=prepareStatement.executeQuery();
		           record.next();
		           int index=record.getInt(1);
		           if(index!=0) {
		    	   System.out.println("Duplicate values are not allowed in employee details.Already we have that employee Id");
			       test=1;
	     }
	     	}
		
	         catch(Exception error) {
	        	 System.out.println(error);
      	}	
	         }
	         if(test==1) {
	        	 continue;
	         }
	      try{
		   if(!data.matches(conditions)) {
		        throw new Exception();
				}return data;
			 }
		  catch(Exception error) {
				System.out.println(invalid);
				   continue;
			   }
		   }
		}
	  
	//overriding
	public String dobValidation(String date) { 
		if(date=="DOJ") {
			String dobValue=super.dobValidation(date);
			return dobValue;
		}
		else {
		while(true) {
			String dateOfBirth=validCheck(" DateOfBirth in dd/mm/yyyy in format:","^(29-02-(2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26]))))$"
	  					+"|^((0[1-9]|1[0-9]|2[0-8])-02-((19|2[0-9])[0-9]{2}))$"
	  					+"|^(0[1-9]|[12][0-9]|3[01])-(0[13578]|10|12)-((19|2[0-9])[0-9]{2})$"
	  					+"|^((0[1-9]|[12][0-9]|30)-(0[469]|11)-((19|2[0-9])[0-9]{2}))$","Enter the valid data birth."
	  							+ "Age should greater than 18 and less than 60");
		long ageValid=0;
		SimpleDateFormat dateCheck =new SimpleDateFormat("dd-mm-yyyy");
		try {
			Date dobDate=dateCheck.parse(dateOfBirth);
			Date DateofJoin = new Date();
			String stringDate=dateCheck.format(DateofJoin);
			Date currentDate=dateCheck.parse(stringDate);
			ageValid= ((currentDate.getTime()-dobDate.getTime())/86400000)/365;
			} 
		catch (ParseException error) {
		System.out.println(error);
		}
		if(ageValid>=18 && ageValid<=60) {
			return dateOfBirth;
			}
			System.out.println("Age is not between 18 and 60");
			continue;
		}
		}
		}	    
        }
        
        
        
        
        
        
        
        
        // VALIDATION
        
        
        
        
        import java.util.Scanner;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.ParseException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public abstract class Validation{                                  //abstract class
	 public abstract String validCheck(String details,String conditions,String Invalid);//abstract method
	 public void employeeDetailsMethod(int noOfEmployee){
	   for(int count=1;count<=noOfEmployee;count++) {
       Details detailsEmployee=new Details();//object creation for class Details
	   System.out.println("\nEmployee:"+(count));
	   detailsEmployee.setEmployeeId(validCheck(" Id:","^ACE+[0-9]{4}","Please enter proper EmployeeId.No special characters are allowed.EmployeeId should begin with ACE followed by 4 digits"));
	   Scanner scanner =new Scanner(System.in);
	 while(true) {
		System.out.println("Enter your Employee Name:");
		String name=scanner.nextLine();
	 try {
		if(!name.matches("^(?=.{2,20}$)(([a-zA-Z])\\2?(?!\\2))+$")) {
		  throw new Exception();
		}
		}
	 catch(Exception error) {
			System.out.println("Please enter proper name .No special characters and neumerics are allowed");
			continue;
	      }
		detailsEmployee.setName(name);
		  break;
	    }
	   detailsEmployee.setEmailId(validCheck(" MailId:","^(?=.{2,30}$)(([a-zA-Z0-9])\\2?(?!\\2))+(?:\\."+"[a-zA-Z0-9]+)*@"+"(?:[a-zA-Z]+\\.)+[.com]{2,7}$","Please enter proper mailId Example:mail@domain.com. "+ "Domain must contains only alphabets.No special characters are allowed"));
	   detailsEmployee.setDob(dobValidation("DOB"));
	   detailsEmployee.setDoj(dobValidation("DOJ"));
	   try {
		   Class.forName("com.mysql.cj.jdbc.Driver");
		   Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");
		   PreparedStatement prepareStatement=connection.prepareStatement("INSERT INTO employeedetails(EmployeeId,EmployeeName,EmployeeMailid,EmployeeDob,EmployeeDoj)VALUES(?,?,?,?,?)");
	       prepareStatement.setString(1,detailsEmployee.employeeId); 
	       prepareStatement.setString(2,detailsEmployee.name); 
	       prepareStatement.setString(3,detailsEmployee.emailId); 
	       prepareStatement.setString(4,detailsEmployee.dob); 
	       prepareStatement.setString(5,detailsEmployee.doj); 
	       prepareStatement.executeUpdate();
	       connection.close();
	   }
	   catch(Exception error) {
		   System.out.println(error);
	   }
	   System.out.println();
		}
		System.out.println("Details has been added");
		System.out.println();
	}
	 //employee details display
	public void detailsDisplay(){
		 Scanner scanner =new Scanner(System.in);
		int number=1;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");
			PreparedStatement prepareStatement=connection.prepareStatement("SELECT COUNT(*) FROM employeedetails");
			ResultSet record=prepareStatement.executeQuery();
			record.next();
			int rows=record.getInt(1);
			if(rows==0) {
			System.out.println("Employee arraylist is empty.Add the details of employee and then display it");
		}else {
			System.out.println("Enter your display option:");
			System.out.println("1.Enter Id to display the employee:");
			System.out.println("2.Display full details");
			int displayNumber=scanner.nextInt();
		switch(displayNumber) {
		case 1:
			System.out.println("Enter employee id to display:");
			String idDisplay=scanner.next();
			PreparedStatement statementsDisplay=connection.prepareStatement("SELECT EmployeeId, EmployeeName, EmployeeMailId, EmployeeDob, EmployeeDoj FROM employeedetails where EmployeeId=?");
			statementsDisplay.setString(1, idDisplay);
			ResultSet records=statementsDisplay.executeQuery();
			while(records.next()) {
		    System.out.println("\nEmployee Details:"+(number));
		    System.out.println("Employee Id : "+records.getString(1));
		    System.out.println("Name        : "+records.getString(2));
		    System.out.println("Email Id    : "+records.getString(3));
		    System.out.println("DOB         : "+records.getString(4));
		    System.out.println("DOJ         : "+records.getString(5));
		    number++;
		    }
			break;
		case 2:	
			PreparedStatement statementDisplay=connection.prepareStatement("SELECT EmployeeId, EmployeeName, EmployeeMailId, EmployeeDob, EmployeeDoj FROM employeedetails");
			ResultSet recorders=statementDisplay.executeQuery();
			while(recorders.next()) {
		    System.out.println("\nEmployee Details:"+(number));
		    System.out.println("Employee Id : "+recorders.getString(1));
		    System.out.println("Name        : "+recorders.getString(2));
		    System.out.println("Email Id    : "+recorders.getString(3));
		    System.out.println("DOB         : "+recorders.getString(4));
		    System.out.println("DOJ         : "+recorders.getString(5));
		    number++;
		}
			break;
	}
		}
		}
		catch(Exception error) {
			System.out.println(error);
		}
	}
	public void deleteDetails(String idEmployee) {
		try {
			   Class.forName("com.mysql.cj.jdbc.Driver");
			   Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");
			   PreparedStatement prepareStatement=connection.prepareStatement("DELETE FROM employeedetails WHERE EmployeeId=(?)");
			   prepareStatement.setString(1, idEmployee);
			   int rows=prepareStatement.executeUpdate();
			   if(rows==0) {
				   System.out.println("EmployeeId is not found.Enter proper EmployeeId");
			   }
			   else {
				   System.out.println("Details has been deleted");
			   }
			   connection.close();
		   }
		 catch(Exception error){
			   System.out.println(error);
		   }
	     	}
	public void updateEmployeeDetails(String employeeId) {
		Scanner scanner=new Scanner(System.in);
		try {
			   Class.forName("com.mysql.cj.jdbc.Driver");
			   Connection connection=DriverManager.getConnection("jdbc:mysql://localhost:3306/employee_application","root","aspire@123");
			   PreparedStatement prepareStatement=connection.prepareStatement("SELECT COUNT(*) FROM employeedetails WHERE EmployeeId=(?)");
			   prepareStatement.setString(1, employeeId);
			   ResultSet record=prepareStatement.executeQuery(); 
			   record.next();
			   int resultset=record.getInt(1);
			if(resultset==0) {
				   System.out.println("No id found");
			   }
			else {
		while(true) {
			   System.out.println("which field do you want to update?\n1.EmployeeID\n2.Employeename\n3.EmployeeEmail\n4.DateOfBirth\n5.DateOfJoining\n6.Exit");
			   int choose=scanner.nextInt();
			switch(choose) {
			case 1:
			    String id=validCheck(" Id to update:","^ACE+[0-9]{4}","Please enter proper EmployeeId.No special characters are allowed.EmployeeId should begin with ACE followed by 4 digits");
				PreparedStatement prepstatementId=connection.prepareStatement("UPDATE employeedetails set EmployeeId=(?) WHERE EmployeeId=(?)");
			    prepstatementId.setString(1,id);
				prepstatementId.setString(2,employeeId);
				prepstatementId.executeUpdate();
				break;
			case 2:
				String name=validCheck("Name to update:","^(?=.{2,20}$)(([a-zA-Z])\\2?(?!\\2))+$","Please enter proper name .No special characters and neumerics are allowed");
				PreparedStatement prepstatementName=connection.prepareStatement("UPDATE employeedetails set EmployeeName=(?) WHERE EmployeeId=(?)");
				prepstatementName.setString(1,name);
				prepstatementName.setString(2,employeeId);
				prepstatementName.executeUpdate();
				break;
			case 3:
				String mailId=validCheck("MailId to update:","^(?=.{2,30}$)(([a-zA-Z0-9])\\2?(?!\\2))+(?:\\."+"[a-zA-Z0-9]+)*@"+"(?:[a-zA-Z]+\\.)+[.com]{2,7}$","Please enter proper mailId Example:mail@domain.com.\nDomain must contains only alphabets.No special characters are allowed");
				PreparedStatement prepstatementMailId=connection.prepareStatement("UPDATE employeedetails set EmployeeMailId=(?) WHERE EmployeeId=(?)");
				prepstatementMailId.setString(1,mailId);
				prepstatementMailId.setString(2,employeeId);
				prepstatementMailId.executeUpdate();
				break;
			case 4:
			    String dob=dobValidation("DOB");
			    PreparedStatement prepstatementDob=connection.prepareStatement("UPDATE employeedetails set EmployeeDob=(?) WHERE EmployeeId=(?)");
			    prepstatementDob.setString(1,dob);
				prepstatementDob.setString(2,employeeId);
				prepstatementDob.executeUpdate();
				break;
			case 5:
				String doj=dobValidation("DOJ");
				PreparedStatement prepstatementDoj=connection.prepareStatement("UPDATE employeedetails set EmployeeDoj=(?) WHERE EmployeeId=(?)");
				prepstatementDoj.setString(1,doj);
				prepstatementDoj.setString(2,employeeId);
				prepstatementDoj.executeUpdate();
				break;
				}
				if(choose==6) {
						break;
					}
			   }
		connection.close();
			   }
		}
			catch(Exception error) {
				   System.out.println(error);
		  }
		}
	
	//overridden
	public String dobValidation(String date) { 
		while(true) {
			String dateOfJoin=validCheck(" DateOfJoining in dd/mm/yyyy format:","^(29-02-(2000|2400|2800|(19|2[0-9](0[48]|[2468][048]|[13579][26]))))$"
	  					+"|^((0[1-9]|1[0-9]|2[0-8])-02-((19|2[0-9])[0-9]{2}))$"
	  					+"|^(0[1-9]|[12][0-9]|3[01])-(0[13578]|10|12)-((19|2[0-9])[0-9]{2})$"
	  					+"|^((0[1-9]|[12][0-9]|30)-(0[469]|11)-((19|2[0-9])[0-9]{2}))$","Enter the valid data birth."
	  							+ "Age should greater than 18 and less than 60");
		long validDays=0;
		SimpleDateFormat dateCheck =new SimpleDateFormat("dd-mm-yyyy");
		try {
			Date dobDate=dateCheck.parse(dateOfJoin);
			Date DateofBirth = new Date();
			String stringDate=dateCheck.format(DateofBirth);
			Date currentDate=dateCheck.parse(stringDate);
			validDays= ((currentDate.getTime()-dobDate.getTime())/86400000)%365;
			//System.out.println(validDays);
			} 
		catch (ParseException error) {
	     	System.out.println(error);
		   }
		 if(validDays>0 && validDays<=7){
			return dateOfJoin;
			}
			System.out.println("Future dates and present dates are not allowed");
			continue;
			}
		  } 
      }
